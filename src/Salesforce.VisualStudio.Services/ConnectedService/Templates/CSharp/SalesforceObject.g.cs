// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Salesforce.VisualStudio.Services.ConnectedService.Templates.CSharp
{
    using Salesforce.VisualStudio.Services.ConnectedService.CodeModel;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class SalesforceObject : SalesforceObjectBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using Newtonsoft.Json;\r\nusing Salesforce.Common.Attributes;\r\nusing System;\r\nusing" +
                    " System.Collections.Generic;\r\nusing System.ComponentModel.DataAnnotations;\r\nusin" +
                    "g System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ");
            
            #line 15 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generatedObject.Service.ModelsNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class ");
            
            #line 17 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generatedObject.Model.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 19 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

// Generate the simple storage properties.
foreach (GeneratedStorageProperty storageProperty in generatedObject.StorageProperties)
{
    if (string.Equals(storageProperty.Model.SoapType, "urn:address", StringComparison.OrdinalIgnoreCase))
    {
        continue;
    }

    if (storageProperty.IsKey)
    {

            
            #line default
            #line hidden
            this.Write("        [Key]\r\n");
            
            #line 32 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

    }

    if (storageProperty.Model.Label != null && storageProperty.Model.Label != storageProperty.Model.Name)
    {

            
            #line default
            #line hidden
            this.Write("        [Display(Name = \"");
            
            #line 38 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(storageProperty.Model.Label));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 39 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

    }

    switch (storageProperty.Model.Type)
    {
        case "string":

            
            #line default
            #line hidden
            this.Write("        [StringLength(");
            
            #line 46 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(storageProperty.Model.Length));
            
            #line default
            #line hidden
            this.Write(")]\r\n");
            
            #line 47 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

            break;
        case "phone":

            
            #line default
            #line hidden
            this.Write("        [Phone]\r\n");
            
            #line 52 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

            break;
        case "email":

            
            #line default
            #line hidden
            this.Write("        [EmailAddress]\r\n");
            
            #line 57 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

            break;
        case "url":

            
            #line default
            #line hidden
            this.Write("        [Url]\r\n");
            
            #line 62 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

            break;
    }

    string createableUpdateable = String.Empty;
    if (!storageProperty.Model.Createable)
    {
        createableUpdateable += "Createable(false)";
    }
    // BUG: As of 9/25/14, Salesforce doesn't set Updateable as false on the OwnerId property, which is only createable.
    if (!storageProperty.Model.Updateable || storageProperty.Model.Name == "OwnerId") 
    {
        createableUpdateable += (createableUpdateable.Length > 0) ? ", Updateable(false)" : "Updateable(false)";
    }
    if (createableUpdateable.Length > 0) 
    {

            
            #line default
            #line hidden
            this.Write("        [");
            
            #line 79 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(createableUpdateable));
            
            #line default
            #line hidden
            this.Write("]\r\n");
            
            #line 80 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

    }

    // The Salesforce schema contains some Objects that have properties with the same name as the Object.
    // This is not allowed in C#, therefore the property name must be changed when this occurs.
    string propertyName = storageProperty.Model.Name;
    if (generatedObject.Model.Name == propertyName)
    {
        propertyName += "_Property";

            
            #line default
            #line hidden
            this.Write("        [JsonProperty(\"");
            
            #line 90 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(storageProperty.Model.Name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 91 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

    }

            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 94 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetFriendlyTypeName(storageProperty)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 94 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n\r\n");
            
            #line 96 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

}

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 101 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

private string GetFriendlyTypeName(GeneratedStorageProperty storageProperty)
{
    string typeName = storageProperty.ClrType.Name;

    // Use the type's keyword if one exists.
    if (storageProperty.ClrType == typeof(string))
    {
        typeName = "string";
    }
    else if (storageProperty.ClrType == typeof(int))
    {
        typeName = "int";
    }
    else if (storageProperty.ClrType == typeof(bool))
    {
        typeName = "bool";
    }
    else if (storageProperty.ClrType == typeof(double))
    {
        typeName = "double";
    }
    else if (storageProperty.ClrType == typeof(object))
    {
        typeName = "object";
    }
    else if (storageProperty.ClrType == typeof(byte[]))
    {
        typeName = "byte[]";
    }

    if (storageProperty.IsNullableType)
    {
        // Use the ? nullable syntax.
        typeName += "?";
    }

    return typeName;
}

        
        #line default
        #line hidden
        
        #line 1 "E:\GitHub\visual-studio-tools\src\Salesforce.VisualStudio.Services\ConnectedService\Templates\CSharp\SalesforceObject.tt"

private global::Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedObject _generatedObjectField;

/// <summary>
/// Access the generatedObject parameter of the template.
/// </summary>
private global::Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedObject generatedObject
{
    get
    {
        return this._generatedObjectField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool generatedObjectValueAcquired = false;
if (this.Session.ContainsKey("generatedObject"))
{
    this._generatedObjectField = ((global::Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedObject)(this.Session["generatedObject"]));
    generatedObjectValueAcquired = true;
}
if ((generatedObjectValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("generatedObject");
    if ((data != null))
    {
        this._generatedObjectField = ((global::Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedObject)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class SalesforceObjectBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
